pipeline {

  agent none

  environment {
    NAME = "eshop-product"
    GIT_COMMIT_REV = ''
    VERSION = "${env.BUILD_ID}-${GIT_COMMIT_REV}"
    IMAGE = "${NAME}:${VERSION}"
    REPONAME = "setnext"
    JAR_FILE = "com.setnext.eshop.products.jar"
  }
  stages {
    stage('Checkout Eshop Product API Repo') {
      agent any
      steps {
        script {
          def scmVars = checkout([$class: 'GitSCM',
            branches: [
              [name: '*/main']
            ],
            userRemoteConfigs: [
              [credentialsId: '04b7fff3-441b-491a-9c6d-1654a7fd0b77',
                url: 'https://github.com/setnext/eshop-product.git'
              ]
            ]
          ])
          GIT_COMMIT_REV = scmVars.GIT_COMMIT.substring(0, 7)
          VERSION = "${env.BUILD_ID}-${GIT_COMMIT_REV}"
          env.IMAGETAG = "${NAME}:${VERSION}"

        }
      }
    }
    stage('Build and Test') {
      agent {
        docker {
          image 'maven:3.8.1-openjdk-17'
          args '-v /Users/nbabu/.m2:/root/.m2'
        }
      }
      steps {
        sh 'mvn package'
      }
    }
    stage('Docker Build') {
      agent any
      steps {
        script {
          sh 'docker build --build-arg JAR_FILE=${JAR_FILE} --progress=plain --no-cache -t ${REPONAME}/${IMAGETAG} .'
        }
      }
    }
    stage('Push Image to Hub') {
    	agent any
      steps {
      	withCredentials([usernamePassword(credentialsId: 'setnextdockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        	sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
          sh 'docker push ${REPONAME}/${IMAGETAG}'
        }
      }
    }
    stage('Deploy to Kubernetes Cluster') {
      agent any
      steps {
        script {
          sh "sed -i '' 's#{image}#setnext/eshop-product:31-c59b409#' cicd/yaml/base/deployment.yaml"
          sh "kustomize build cicd/yaml/overlays/dev/ | kubectl apply -f -"
        }
      }
    }
  }
}
